pipeline {
    agent any
    options {
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '4', daysToKeepStr: '', numToKeepStr: '4')
    }
    environment {
      EMAIL_TO = 'nikhil.verma@innobitsystems.com'
      HOME = '.'
      PROJECT_ID ='zipydev'
      CLUSTER_NAME = 'zipydev-cluster'
      LOCATION = 'us-central1-a'
      CREDENTIALS_ID = 'test-gcp'
    }
    stages{
    stage('Pipeline started') {
                steps{
                    slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                    emailext body : ''' STARTED: Job '${JOB_NAME} #${BUILD_NUMBER}'  ''',
                    to: "${EMAIL_TO}",
                    subject: "STARTED: Job '${JOB_NAME} #${BUILD_NUMBER}'"
                }
            }
    // stage('build Package') {
    //       agent {
    //         docker{image 'gradle:7.2.0-jdk11'}
    //       }
    //         steps{
    //               dir('src/server/microservices/cloud-gateway') { // or absolute path
    //                 sh 'ls'
    //                 sh 'gradle clean build'
    //             }
    //           }
    //         }
//     stage('code scan') {
//         steps{
//           echo 'code scan'
//         }
//       }
    stage('Build image') {
            steps{
                dir('src/server/microservices/cloud-gateway') {
                sh 'pwd'    
                sh 'docker build -t ${JOB_NAME}:v1.${BUILD_NUMBER} -f ./Env/Dev/Dockerfile .'
                sh 'docker tag ${JOB_NAME}:v1.${BUILD_NUMBER} gcr.io/${PROJECT_ID}/${JOB_NAME}:v1.${BUILD_NUMBER}'
                sh 'docker tag ${JOB_NAME}:v1.${BUILD_NUMBER} gcr.io/${PROJECT_ID}/${JOB_NAME}:latest'
                }
            }
        }
    // stage('Scan Image') {
    //   steps {
    //     sh 'grype gcr.io/${PROJECT_ID}/${JOB_NAME}:latest --scope AllLayers'
    //   }
    // }
    stage('container push to GCR') {
          steps{
            withCredentials([file(credentialsId: 'gcp-project-key', variable: 'gcr_cred_zipy')]) {
            // sh 'cat /root/idyllic-anvil-326612-68b473297701.json | docker login -u  _json_key --password-stdin  https://gcr.io/idyllic-anvil-326612'
            sh 'cat ${gcr_cred_zipy} | docker login -u  _json_key --password-stdin  https://gcr.io/zipydev'
            sh 'docker push gcr.io/${PROJECT_ID}/${JOB_NAME}:v1.${BUILD_NUMBER}'
            sh 'docker push gcr.io/${PROJECT_ID}/${JOB_NAME}:latest'
            sh 'docker rmi -f ${JOB_NAME}:v1.${BUILD_NUMBER} gcr.io/${PROJECT_ID}/${JOB_NAME}:v1.${BUILD_NUMBER} gcr.io/${PROJECT_ID}/${JOB_NAME}:latest'
            //         }
            }
          }
        }
//           // stage('verify misconfiguration of yml files') {
//           //   steps {
//           //     dir ('src/server/microservices/reporting-service/Env/Dev') {
//           //       sh 'datree test deployment.yaml'
//           //     }
//           //   }
//           // }
           stage('Approval for deploy on Dev') {
                steps{
                    emailext body: '''
                        Please go to console output of ${BUILD_URL}input to approve or Reject.''',
                    to: "${EMAIL_TO}",
                    subject: '[Jenkins] ${JOB_NAME} - #$BUILD_NUMBER : Build Approval Request '
                    echo "take approval from manager"
                    timeout(time: 1, unit: 'HOURS') {
                       input message: 'Do you approve this code', submitter: 'nidhi, kunal'
                    }
                }
            }
          stage('build') {
            steps {
                dir('src/server/microservices/cloud-gateway/Env/Dev') {
                echo "Deployment started ..."
                sh 'ls -ltr'
                //withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'zipydev-cluster', contextName: '', credentialsId: 'dev-zipy-cluster', namespace: 'kube-system', serverUrl: 'https://34.121.50.216']]) {
                  withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'zipystage-cluster', contextName: '', credentialsId: 'staging-zipy-cluster', namespace: 'kube-system', serverUrl: 'https://35.193.124.172']]) {
                    sh 'kubectl apply -f deployment.yaml'
                    }
                }
           }
        }

        //   stage('Deploy Pods on Zipy-Dev') {
        //     steps{
        //         dir('src/server/microservices/cloud-gateway/Env/Dev') {
        //         echo "Deployment started ..."
        //         sh 'ls -ltr'
        //         echo "Start deployment of integration service yaml"
        //         step([$class: 'KubernetesEngineBuilder',
        //                 projectId: env.PROJECT_ID,
        //                 clusterName: env.CLUSTER_NAME,
        //                 zone: env.LOCATION,
        //                 manifestPattern: 'deployment.yaml',
        //                 credentialsId: env.CREDENTIALS_ID,
        //                 verifyDeployments: false])
        //         echo "Deployment Finished ..."
        //         }
        //     }
        // }
        stage('Refresh Deployment') {
            steps {
//                dir('src/server/microservices/cloud-gateway/Env/Dev') {
//                echo "Deployment started ..."
//                sh 'ls -ltr'
                //withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'zipydev-cluster', contextName: '', credentialsId: 'dev-zipy-cluster', namespace: 'kube-system', serverUrl: 'https://34.121.50.216']]) {
                  withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'zipystage-cluster', contextName: '', credentialsId: 'staging-zipy-cluster', namespace: 'kube-system', serverUrl: 'https://35.193.124.172']]) {
                    sh 'kubectl rollout restart deployment/stage-cloud-gateway -n zipy-stage'
                   // }
                }
           }
        }
        // stage('Refresh Deployment') {
        //   steps {
        //       script {
        //          withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
        //             sh 'kubectl rollout restart deployment/dev-cloud-gateway -n zipy-stage'
        //       }
        //     }
        //   }
        // }
        // stage('Verify app deployed') {
        //   steps {
        //       script {
        //          withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
        //             sh 'kubectl run curl --image=curlimage/curl -i --rm --restart=Never -- curl ####:port'
        //       }
        //     }
        //   }
        // } #####
      }
      post {
        success {
            slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            emailext body : '''BUILD success''',
            to: "${EMAIL_TO}",
            subject: "BUILD SUCCESS"
        }
        failure {
             slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
             emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=1000, escapeHtml=false}',
                    to: "${EMAIL_TO}",
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
      }
    }